(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{588:function(v,_,t){"use strict";t.r(_);var e=t(5),s=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"web安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web安全"}},[v._v("#")]),v._v(" web安全")]),v._v(" "),t("h2",{attrs:{id:"xss跨站脚本攻击"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xss跨站脚本攻击"}},[v._v("#")]),v._v(" xss跨站脚本攻击")]),v._v(" "),t("blockquote",[t("p",[v._v("XSS 的原理是恶意攻击者往 Web 页面里"),t("code",[v._v("插入恶意可执行网页脚本代码")]),v._v("，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。XSS 的攻击方式千变万化，但还是可以大致细分为几种类型。")])]),v._v(" "),t("h3",{attrs:{id:"非持久型-xss"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非持久型-xss"}},[v._v("#")]),v._v(" 非持久型 XSS")]),v._v(" "),t("p",[v._v("非持久型 XSS 漏洞，也叫反射型 XSS 漏洞，一般是通过给别人发送带有"),t("code",[v._v("恶意脚本代码参数的 URL")]),v._v("，当 URL 地址被打开时，特有的恶意代码参数被 HTML 解析、执行。")]),v._v(" "),t("h4",{attrs:{id:"特点："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特点："}},[v._v("#")]),v._v(" 特点：")]),v._v(" "),t("ol",[t("li",[v._v("即时性，不经过服务器存储，直接通过 HTTP 的 GET 和 POST 请求就能完成一次攻击，拿到用户隐私数据")]),v._v(" "),t("li",[v._v("攻击者需要诱骗点击")]),v._v(" "),t("li",[v._v("反馈率低，所以较难发现和响应修复")]),v._v(" "),t("li",[v._v("盗取用户敏感保密信息")])]),v._v(" "),t("h4",{attrs:{id:"解决方法："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方法："}},[v._v("#")]),v._v(" 解决方法：")]),v._v(" "),t("p",[v._v("为了防止出现非持久型 XSS 漏洞，需要确保这么几件事情")]),v._v(" "),t("ol",[t("li",[v._v("Web 页面渲染的所有内容或者渲染的数据都必须来自于服务端。")]),v._v(" "),t("li",[v._v("尽量不要从 URL，document.referrer，document.forms 等这种 DOM API 中获取数据直接渲染。")]),v._v(" "),t("li",[v._v("尽量不要使用 eval, new Function()，document.write()，document.writeln()，window.setInterval()，window.setTimeout()，\ninnerHTML，document.creteElement() 等可执行字符串的方法。")]),v._v(" "),t("li",[v._v("如果做不到以上几点，也必须对涉及 DOM 渲染的方法传入的字符串参数做 escape 转义。")]),v._v(" "),t("li",[v._v("前端渲染的时候对任何的字段都需要做 escape 转义编码。")])]),v._v(" "),t("p",[v._v("escape 转义的目的是将一些构成 HTML 标签的元素转义，比如 <，>，空格 等，转义成 <，>，  等显示转义字符。有很多开源的工具可以协助我们做 escape 转义。")]),v._v(" "),t("h3",{attrs:{id:"持久型-xss"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#持久型-xss"}},[v._v("#")]),v._v(" 持久型 XSS")]),v._v(" "),t("blockquote",[t("p",[v._v("持久型 XSS 漏洞，也被称为存储型 XSS 漏洞，一般存在于"),t("code",[v._v("Form 表单提交等交互功能")]),v._v("，如发帖留言，提交文本信息等，黑客利用的 XSS 漏洞，将内容经正常功能提交进入数据库持久保存，当前端页面获得后端从数据库中读出的注入代码时，恰好将其渲染执行。")])]),v._v(" "),t("p",[v._v("主要注入页面方式和非持久型 XSS 漏洞类似，只不过持久型的不是来源于 URL，refferer，forms 等，而是来源于"),t("code",[v._v("后端从数据库中读出来的数据")]),v._v("。持久型 XSS 攻击不需要诱骗点击，黑客只需要在提交表单的地方完成注入即可，但是这种 XSS 攻击的成本相对还是很高。")]),v._v(" "),t("p",[v._v("攻击成功需要"),t("code",[v._v("同时满足")]),v._v("以下几个条件 :")]),v._v(" "),t("ol",[t("li",[v._v("POST 请求提交表单后端没做转义直接入库。")]),v._v(" "),t("li",[v._v("后端从数据库中取出数据没做转义直接输出给前端。")]),v._v(" "),t("li",[v._v("前端拿到后端数据没做转义直接渲染成 DOM。")])]),v._v(" "),t("h4",{attrs:{id:"特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[v._v("#")]),v._v(" 特点")]),v._v(" "),t("ol",[t("li",[v._v("持久性，植入在数据库中")]),v._v(" "),t("li",[v._v("危害面广，甚至可以让用户机器变成 DDoS 攻击的肉鸡。")]),v._v(" "),t("li",[v._v("盗取用户敏感私密信息")])]),v._v(" "),t("h4",{attrs:{id:"解决方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方法"}},[v._v("#")]),v._v(" 解决方法")]),v._v(" "),t("ol",[t("li",[v._v("后端在入库前应该选择不相信任何前端数据，将所有的字段统一进行转义处理。")]),v._v(" "),t("li",[v._v("后端在输出给前端数据统一进行转义处理。")]),v._v(" "),t("li",[v._v("前端在渲染页面 DOM 的时候应该选择不相信任何后端数据，任何字段都需要做转义处理。")])]),v._v(" "),t("h2",{attrs:{id:"csrf跨站伪造请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#csrf跨站伪造请求"}},[v._v("#")]),v._v(" CSRF跨站伪造请求")]),v._v(" "),t("h3",{attrs:{id:"解决方法：-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方法：-2"}},[v._v("#")]),v._v(" 解决方法：")]),v._v(" "),t("ul",[t("li",[v._v("Get 请求不对数据进行修改")]),v._v(" "),t("li",[v._v("不让第三方网站访问到用户 Cookie")]),v._v(" "),t("li",[v._v("阻止第三方网站请求接口")]),v._v(" "),t("li",[v._v("请求时附带验证信息，比如验证码或者 Token")])]),v._v(" "),t("h2",{attrs:{id:"sql-注入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sql-注入"}},[v._v("#")]),v._v(" SQL 注入")]),v._v(" "),t("p",[v._v("SQL 注入漏洞（SQL Injection）是 Web 开发中最常见的一种安全漏洞。可以用它来从数据库获取敏感信息，或者利用数据库的特性执行添加用户，导出文件等一系列恶意操作，甚至有可能获取数据库乃至系统用户最高权限。")]),v._v(" "),t("p",[v._v("而造成 SQL 注入的原因是因为程序"),t("code",[v._v("没有有效的转义过滤用户的输入")]),v._v("，使攻击者成功的向服务器提交恶意的 SQL 查询代码，程序在接收后错误的将攻击者的输入作为查询语句的一部分执行，导致原始的查询逻辑被改变，额外的执行了攻击者精心构造的恶意代码。")]),v._v(" "),t("p",[v._v("很多 Web 开发者没有意识到 SQL 查询是可以被篡改的，从而把 SQL 查询当作可信任的命令。殊不知，SQL 查询是可以绕开访问控制，从而绕过身份验证和权限检查的。更有甚者，有可能通过 SQL 查询去运行主机系统级的命令。")])])}),[],!1,null,null,null);_.default=s.exports}}]);